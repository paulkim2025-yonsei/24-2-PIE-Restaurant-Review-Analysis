# src/sentiment.py

import re
import numpy as np
from .embedding_utils import SbertEmbedding


c1 = {  # 맛
    'good': {
        '간': ['맞', '적절', '딱', '환상', '담백', '완벽', '깔끔', '부드럽', '잘 맞춤', '딱 맞춤', '촉촉'],
        '음식': ['정갈', '우수'],
        '맛': ['맛있', '좋', '최고', '맛있다', '훌륭', '매우 맛있', '기막히다', '진하다', '담백하다', '일품', '정통', '짱', '뛰어나다', '입에서 살살 녹는다', '달콤하다', '고소하다', '신선하다', '살짝 짭짤하다', '부드럽다', '끝내준다', '맛깔스럽다', '환상적이다', '향긋하다', '매운맛이 적당하다', '촉촉하다', '강하다', '깔끔하다', '신선한 맛', '부드럽고 고소하다'],
        '내용물': ['충실하다', '풍성하다', '충분하다', '가득하다', '정성스럽다', '신선하다', '다양하다', '풍부하다']
    },
    'bad': {
        '간': ['세', '쎄', '강하다', '짠', '쓴', '짙다', '조금 세다', '짠맛이 강하다', '간이 너무 세다', '짠맛이 지나치다'],
        '음식': ['별로', '최악', '불만족', '못 먹겠다', '실망스럽다', '싫다', '지나치다', '너무 기름지다', '차갑다'],
        '맛': ['별로', '최악', '없다', '맛없다', '쓰다', '시큼하다', '비리다', '짠맛이 심하다', '매운맛이 강하다', '너무 달다', '쓴맛이 난다', '식감이 좋지 않다', '너무 느끼하다', '맛이 없다', '형편없다', '허전하다', '무미건조하다', '후회된다', '도저히 못 먹겠다', '맛이 안 난다', '제대로 된 맛이 없다', '엉망이다', '입에 안 맞다', '불쾌하다', '너무 자극적이다', '기름지다', '어색한 맛', '비린내가 난다'],
        '내용물': ['허술하다', '부족하다', '빈약하다', '조잡하다', '불완전하다', '불균형하다', '단조롭다', '내용이 적다', '부실하다']
    }
}

c2 = {  # 위생
    'good': {
        '위생': ['깔끔', '청결', '정갈하다', '깨끗하다', '위생적', '깔끔하다', '상쾌하다', '청결하다', '잘 관리된다', '정리 정돈', '깨끗하게 관리', '깔끔한', '완벽하게 청소되다', '관리 상태가 좋다', '청소가 잘 되어 있다', '위생이 철저하다', '청결에 신경 쓰다', '깨끗한 환경', '위생 관리가 철저하다', '위생적인']
    },
    'bad': {
        '위생': ['별로', '지저분', '더럽다', '병', '벌레', '머리카락', '쓰레기', '배탈', '장염', '알러지', '의문', '곰팡이', '악취', '불결하다', '위생 상태가 나쁘다', '오염', '냄새가 나다', '불쾌한 냄새', '흙탕물', '세균', '오래된 냄새', '파리', '물때', '지저분한', '불결', '청소가 안 되어 있다', '위생 관리가 부족하다', '위생에 문제가 있다', '입맛이 떨어지다', '찝찝하다', '불쾌하다', '만진 손으로 만지다', '손에 묻다', '손으로 직접 만지다', '청결에 신경 쓰지 않다']
    }
}

c3 = {  # 서비스
    'good': {
        '서비스': ['좋', '친절', '괜찮', '최고', '빠르', '짱', '훌륭', '추천', '감사', '구수', '최상', '대박', '훈훈', '특별', '만족', '감동', '친절하다', '친절하게 대하다', '친절히 응대하다', '상냥하다', '소통 잘 되다', '정성스럽다', '친절한 서비스', '세심하다', '서비스 좋다', '좋은 서비스'],
        '직원': ['친절', '스윗', '센스', '배려', '매너', '좋은 사람', '대화 잘하다', '상냥', '배려심 깊다', '상냥', '능숙하다', '잘 배려하다', '기분 좋다', '능숙', '매너 좋다', '상냥하다', '세심하다', '빠르다', '편안하다', '잘', '빠르게', '성실히', '효율적으로', '능숙하게', '확실히', '정확하게', '체계적으로', '상냥하게', '능숙하게', '깔끔하게', '매너 좋다']
    },
    'bad': {
        '서비스': ['아쉽', '최악', '나쁘', '느리', '빡치', '비추', '별로', '엉망', '실망', '불친절', '문제', '거지', '구려', '헬', '개판', '서비스 안 좋다', '불편하다', '기분 나쁘다', '무례하다', '불쾌하다', '기대 이하', '느리다'],
        '직원': ['불친절', '똑바로', '재수', '비매너', '불쾌', '상대방을 배려하지 않다', '무례', '답답하다', '불쾌하다', '기분 나쁘게 행동하다', '서비스 못하다', '불편하다', '기분 나쁘게 행동하다', '일을 못하다', '느리다', '엉망이다', '성의 없다', '엉망', '부주의', '무능하다', '천천히', '불완전하다', '혼란스럽다', '못', '느리게', '답답', '불편', '엉망', '실수하다']
    }
}


c4 = {  # 분위기
    'good': {
        '분위기': ['좋', '괜찮', '조용', '깔끔', '적당', '깡패', '굉장', '아담', '완벽', '아기자기', '고급', '최고', '세련', '만족', '아늑',
                 '훌륭', '예쁘', '이쁘', '짱', '심쿵', '따뜻', '깨끗', '독특', '매력', '모던', '취향저격', '맘', '마음', '클래식', '아름', '인상적',
                 '귀엽', '포근', '아름답다', '소박하다', '상쾌하다', '멋지다', '편안하다', '아늑하다', '세련되다', '고급스럽다', '호화롭다', '편안한 분위기', '창의적이다'],
        '인테리어': ['좋', '괜찮', '조용', '깔끔', '적당', '깡패', '굉장', '아담', '완벽', '아기자기', '고급', '최고', '세련', '만족', '아늑',
                    '훌륭', '예쁘', '이쁘', '짱', '심쿵', '따뜻', '깨끗', '독특', '매력', '모던', '취향저격', '맘', '마음', '클래식', '아름', '인상적',
                    '귀엽', '포근', '세련되다', '스타일리시', '편안한', '세련된 디자인', '매력적인', '따뜻한', '고급스러움', '모던한', '창의적이다', '세심한', '정갈하다']
    },
    'bad': {
        '분위기': ['나쁘다', '바쁘다', '어수선하다', '이상하다', '촌스럽다', '별로', '부담스럽다', '시끄럽', '복잡', '혼잡', '불편하다', '답답하다', '지저분하다', '지루하다', '산만하다'],
        '인테리어': ['별로', '지저분', '복잡', '허름하다', '불편하다', '구식이다', '지저분하다', '불쾌하다', '어색하다', '혼잡하다', '상태가 안 좋다', '옛날 분위기', '불편한', '시끄럽다', '허름하다', '단조롭다', '지저분한']
    }
}
c5 = {  # 위치 접근성
    'good': {
        '교통': ['편리하다', '좋다', '이동이 쉽다', '괜찮다', '접근이 편하다', '교통편이 다양하다', '가까운 정류장', '역세권', '지하철 근처', '버스 정류장 인접',
                 '교통이 원활하다', '교통혼잡이 없다', '편리한 교통수단', '교통망이 잘 되어 있다'],
        '주차': ['편리하다', '좋다', '넓다', '괜찮다', '충분하다', '쾌적하다', '주차공간이 많다', '무료 주차', '주차하기 쉬움', '주차장 가까움', '주차 공간 확보',
                 '주차가 용이하다', '주차 공간이 넓다', '주차가 편리하다'],
        '거리': ['가깝다', '멀지 않다', '짧다', '적당하다', '근처에 있다', '걸어서 갈 수 있다', '근방', '도보 가능', '바로 앞에 있다', '도보 거리 내에 있다'],
        '찾기': ['쉽다', '편하다', '잘 보인다', '눈에 띄다', '간판이 잘 보임', '표지가 명확하다', '위치가 명확하다', '찾기 쉬운 위치', '위치 파악이 용이하다',
                 '명확한 위치 표시', '찾기 직관적'],
        '환경': ['좋은 위치', '편의시설 근처', '맛집 거리'],
        '포장': ['포장하기 좋다', '편리한 포장', '간편한 포장', '손쉬운 포장']
    },
    'bad': {
        '교통': ['불편하다', '나쁘다', '접근 어렵다', '힘들다', '교통편이 없다', '역에서 멀다', '버스 정류장에서 멀다', '불친절한 교통 환경', '복잡한 도로', '교통이 혼잡하다',
                 '교통 체증이 심하다', '대중교통이 불편하다', '교통망 부족'],
        '주차': ['불편하다', '좁다', '없다', '힘들다', '문제', '애매하다', '복잡하다', '주차공간 부족', '주차장 없음', '주차비 비쌈', '주차 불가능', '주차가 어렵다',
                 '주차 공간이 협소하다', '주차 공간이 없다'],
        '거리': ['멀다', '애매하다', '길다', '불편하다', '찾기 어려운 거리', '도보 불가능', '자동차 필수', '거리감 느껴짐', '도보 거리가 너무 멀다', '지나가기 어려운 거리'],
        '찾기': ['어렵다', '힘들다', '애매하다', '간판이 없다', '표지가 없다', '위치가 애매하다', '구석진 곳에 있다', '찾기가 불편하다', '위치가 불명확하다', '찾기 힘들다'],
        '환경': ['길이 복잡하다', '골목에 있다', '외진 곳', '사람이 많다', '좁은 공간', '공간 협소', '복잡한 환경'],
        '포장': ['포장하기 어렵다', '불편한 포장', '번거로운 포장', '포장이 불편하다']
    }
}

c6 = {  # 대기시간
    'good': {
        '대기시간': ['짧', '빠르', '금방', '없', '쾌적', '좋', '최소', '최상', '즉각', '원활'],
        '기다림': ['없', '짧', '괜찮', '편안', '최소', '빠르게', '원활'],
        '웨이팅': ['없', '짧', '금방', '빠르', '적음', '금방 끝남', '대기 없', '빠르게'],
        '줄': ['짧', '없', '금방', '빠르게', '길지 않음', '대기 없', '빠르게 줄어듬'],
        '순번': ['빠르', '짧', '금방', '즉시', '효율적'],
        '시간': ['짧', '빠르', '적게', '효율적', '기다릴 필요 없음', '최단시간', '효율적 시간대'],
        '주문': ['주문하고 바로', '즉시 주문', '바로 주문']
    },
    'bad': {
        '대기시간': ['길', '느리', '오래', '지연', '짜증', '답답', '최악', '지루함', '불편', '지속됨'],
        '기다림': ['길', '짜증', '오래', '지침', '답답', '불편', '지연'],
        '웨이팅': ['길', '많', '지침', '불편', '오래', '장시간'],
        '줄': ['길', '많', '답답', '느림', '혼잡', '시간 오래 걸림'],
        '순번': ['느리', '길', '답답', '지연', '불편', '불규칙'],
        '시간': ['많이 걸림', '지침', '길', '지연', '오래 걸림', '느림'],
        '기다려': ['기다려야 함', '오래 기다려', '지속적인 기다림', '기다리는데 시간 많이 걸림']
    }
}


c7 = {  # 가성비
    'good': {
        '가성비': ['좋다', '우수', '훌륭', '가치있다', '만족', '합리적', '경제적', '좋은 선택', '실속 있다', '가성비 최고', '합리적인 가격', '효율적', '가격 대비 우수'],
        '가격대비': ['좋다', '우수하다', '합리적이다', '높다', '저렴하다', '효율적이다', '알맞다', '가치있다'],
        '품질': ['좋다', '우수하다', '완벽하다', '훌륭하다', '만족스럽다', '좋은 품질', '우수한 품질'],
        '구성': ['알맞다', '효율적이다', '잘 짜여 있다', '깔끔하다', '정확하다'],
        '선택': ['만족스럽다', '합리적이다', '효율적이다', '경제적이다', '좋다'],
        '제품': ['우수하다', '좋다', '합리적이다', '가격 대비 좋다', '매우 만족스럽다']
    },
    'bad': {
        '가성비': ['나쁘다', '불만족', '가격에 비해 품질이 낮다', '비싸다', '구매하기 아깝다', '돈 낭비', '비효율적이다', '실속 없다', '비쌌다'],
        '가격대비': ['별로다', '가격에 비해 품질이 낮다', '비싸다', '불만족스럽다'],
        '품질': ['떨어진다', '별로다', '나쁘다', '불만족', '불완전하다', '저품질'],
        '구성': ['불완전하다', '나쁘다', '비효율적이다', '복잡하다'],
        '선택': ['별로다', '비효율적이다', '불만족스럽다'],
        '제품': ['비싸다', '품질이 낮다', '돈 낭비', '가성비 나쁘다']
    }
}

c8 = {  # 가격
    'good': {
        '가격': ['저렴', '합리적', '적당', '좋다', '가격대비 훌륭', '가격에 비해 좋다', '경제적', '가성비 좋다', '할인', '알뜰하다'],
        '비용': ['저렴하다', '낮다', '합리적이다', '효율적이다', '비용 부담 적다', '적당하다'],
        '할인': ['좋다', '할인 중', '이득', '세일', '기회', '특가', '프로모션'],
        '구매': ['저렴하게 구매', '저렴한 가격', '특가로 구매', '할인 혜택'],
        '가격대': ['적당하다', '합리적이다', '너무 비싸지 않다'],
        '지불': ['좋다', '합리적이다', '불편하지 않다', '편리하다']
    },
    'bad': {
        '가격': ['비쌈', '비싸다', '과다하다', '너무 높다', '가격이 안 맞다', '비효율적', '과잉', '가격에 비해 나쁘다'],
        '비용': ['높다', '과도하다', '부담스럽다', '무리', '비용이 크다'],
        '할인': ['없다', '할인 안 됨', '할인 혜택 없음', '할인 적다', '할인 없어서 비싸다'],
        '구매': ['비싸다', '가격에 비해 불만족', '구매하기 아깝다'],
        '가격대': ['너무 비쌈', '너무 높다', '비효율적 가격대'],
        '지불': ['불편하다', '가격이 비싸서 부담된다', '불편한 지불']
    }
}

class_mapping = {
    "클래스1": "맛있음",
    "클래스2": "위생",
    "클래스3": "서비스",
    "클래스4": "분위기",
    "클래스5": "위치 접근성",
    "클래스6": "대기 시간",
    "클래스7": "가성비",
    "클래스8": "가격"
}

class_dictionaries = {
    "클래스1": c1,
    "클래스2": c2,
    "클래스3": c3,
    "클래스4": c4,
    "클래스5": c5,
    "클래스6": c6,
    "클래스7": c7,
    "클래스8": c8
}

class SentimentAnalyzer:

    def __init__(self, threshold=0.5):
        self.threshold = threshold
        self.sbert = SbertEmbedding()

    def preprocess_text(self, text):
        text = re.sub(r"[^ㄱ-ㅎㅏ-ㅣ가-힣a-zA-Z0-9\s]", "", text)
        text = re.sub(r"\s+", " ", text).strip()
        return text

    def cosine_similarity(self, a, b):
        a = a / np.linalg.norm(a)
        b = b / np.linalg.norm(b)
        return np.dot(a, b.T)

    def analyze_sentiment(self, review_text, keyword_dict):

        cleaned = self.preprocess_text(review_text)
        review_embedding = self.sbert.encode(cleaned, convert_to_tensor=False)

        pos_score = 0
        neg_score = 0

        for sentiment_type in ['good', 'bad']:
            keywords_dict = keyword_dict.get(sentiment_type, {})
            for keyword, related_words in keywords_dict.items():
                keyword_sentence = ' '.join([keyword] + related_words)
                keyword_embedding = self.sbert.encode(keyword_sentence, convert_to_tensor=False)
                sim = self.cosine_similarity(review_embedding, keyword_embedding)

                if sim >= self.threshold:
                    if sentiment_type == 'good':
                        pos_score += sim
                    else:
                        neg_score += sim

        if pos_score > neg_score:
            return 'good'
        elif neg_score > pos_score:
            return 'bad'
        else:
            return 'neutral'

    def analyze_reviews_for_class(self, reviews, assigned_class):
        keyword_dict = class_dictionaries.get(assigned_class, {})
        results = []
        for rv in reviews:
            sentiment = self.analyze_sentiment(rv, keyword_dict)
            results.append((rv, sentiment))
        return results
